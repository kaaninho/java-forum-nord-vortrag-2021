#+title: Mach Deine eigene Programmiersprache! (Ohne Deine eigene Programmiersprache machen zu müssen!)

* Orga

Talkdauer: 45 Minuten
Q & A: 5 Minuten

Zu jeder vollen Stunde ein Talk. Nach Talk 10 Minuten Pause.

* Gliederung

- 5 Minuten Einführung in Clojure
- 10 Minuten Einführung in Makros (mit Mini-Syntax-Erleichterungs-Beispielen wie
  z. B. =when= oder Threading-Operator)
- 30 Minuten nützliche Makros selbst programmieren 

* Ideen für nützliche Makros

- =time=-Makro als erstes kleines Beispiel (wird schon für Staunen sorgen!)
- active-records: Vllt. zu uninteressant, bzw. zu wenig "eigene Sprache"?
- "typed clojure": Zu umfrangreich? Zu viele Fallstricke?


* Timing

Motivation: Möchte schauen, wie lang ein Funktionsaufruf braucht.

** Java

Let's google it:

https://stackoverflow.com/questions/180158/how-do-i-time-a-methods-execution-in-java

#+begin_src java
long startTime = System.currentTimeMillis();

doReallyLongThing();

long endTime = System.currentTimeMillis();

System.out.println("Needed " + (endTime - startTime) + " ms.");
#+end_src

** Clojure

Let's build it!

#+begin_src clojure
(let [before (System/currentTimeMillis)
      calc   (do-something)
      after  (System/currentTimeMillis)]
  (println "Needed " (- after before) " ms."))
#+end_src




* vorhandene Libraries / schon eingebaut

Differences between =clojure.typed=, =clojure.spec=, =prismatic/schema=

https://stackoverflow.com/questions/46581570/clojure-spec-vs-typed-vs-schema/46585203 

** schema

Beispiel

#+begin_src clojure
(s/defn foo :- s/Num
  [x :- s/Int
   y :- s/Num]
  (* x y))
#+end_src

** Spec

Beispiel:

#+begin_src clojure
(s/fdef foo
  :args (s/and (s/cat :x int? :y int?)
               #(> (:x %) 0))
  :ret int?)

(defn foo
  [x y]
  (* x y))
#+end_src
